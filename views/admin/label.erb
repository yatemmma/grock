<%= erb :"admin/partials/header" %>

<main>
  <div class="col2">
    <form action="/admin/label/<%= item.code || "new" %>" method="post">
      <input name="_method" value="<%= method %>" type="hidden" />

      <%= erb :"admin/partials/form_text", locals: {item: item, key: "code"} %>
      <%= erb :"admin/partials/form_text", locals: {item: item, key: "name"} %>
      <%= erb :"admin/partials/form_text", locals: {item: item, key: "description"} %>
      <%= erb :"admin/partials/form_text", locals: {item: item, key: "founded"} %>
      <%= erb :"admin/partials/form_text", locals: {item: item, key: "origin"} %>

      <%= erb :"admin/partials/form_image", locals: {item: item, key: "icon_url"} %>
      <%= erb :"admin/partials/form_image", locals: {item: item, key: "thumbnail_url"} %>
      <%= erb :"admin/partials/form_image", locals: {item: item, key: "large_url"} %>

      <%= erb :"admin/partials/form_text", locals: {item: item, key: "youtube_keys"} %>

      <% item.tags.each do |tag| %>
        <%= erb :"admin/partials/form_tag", locals: {item: item, tag: tag} %>
      <% end %>
      <%= erb :"admin/partials/form_tag", locals: {item: item, tag: GROCK::Tag.new} %>
      <label>
        <span> </span>
        <button type="button" onclick="onClickButton(this, 'tag')">+</button>
      </label>

      <% item.links.each do |link| %>
        <%= erb :"admin/partials/form_link", locals: {item: item, link: link} %>
      <% end %>
      <%= erb :"admin/partials/form_link", locals: {item: item, link: GROCK::Link.new} %>
      <label>
        <span> </span>
        <button type="button" onclick="onClickButton(this, 'link')">+</button>
      </label>

      <%= erb :"admin/partials/form_body", locals: {item: item, key: "body"} %>

      <label>
        <span> </span>
        <input type="submit" name="commit" value="<%= method %>">
      </label>
    </form>

    <label>
      <span>feed </span>
      <button type="button" onclick="location.href = '/admin/label/<%= item.code %>/feed'">feed</button>
    </label>
    <% item.sources.each do |source| %>
      <div>
        <span><a href="/admin/source/<%= source.id %>" target="_blank"><%= source.created_at %></a></span>
        <span><%= source.url %></span>
        <span><a href="/admin/source2feed/<%= source.id %>" target="_blank"><%= escape_html (source.raw ? source.raw[0, 15] + "..." : "") %></a></span>
        <span><%= source.error %></span>
      </div>
    <% end %>

    <% item.feeds.each do |feed| %>
      <div>
        <div>[<%= feed.title %>]</div>
        <div><%= feed.body %></div>
      </div>
    <% end %>
  </div>

  <div class="col1">
    <div id="info">
    </div>
    <div>
      <div id="youtube" data-key="<%= item.youtube_keys %>"></div>
    </div>
    <div class="preview">
      <img id="image_icon_url"      src="<%= item.image.icon %>" /><br />
      <img id="image_thumbnail_url" src="<%= item.image.thumbnail %>" /><br />
      <img id="image_large_url"     src="<%= item.image.large %>" />
    </div>
  </div>
</main>

<script>
window.onload = ()=>{
  loadYoutubeScript()
}
window.onYouTubeIframeAPIReady = () => {
  const element = document.querySelector("input[name='entry[youtube_keys]']")
  if (element.value) {
    const video = document.querySelector("#youtube")
    video.innerHTML = ""
    video.setAttribute("data-key", element.value)
    loadYoutubeVideo(video)
  }
}

function loadYoutubeScript() {
  const tag = document.createElement("script")
  tag.src = "https://www.youtube.com/iframe_api"
  const firstScriptTag = document.getElementsByTagName("script")[0]
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag)
}

function loadYoutubeVideo(element) {
  const keys = element.getAttribute("data-key").split(",").map((x)=>{return x.trim()})
  const video = document.createElement("div")
  video.id = "xxx"
  element.appendChild(video)
  const player = new YT.Player(video.id, {
    width: "100%",
    height: "300px",
    videoId: (keys.length >= 2) ? "" : keys[0],
    playerVars: {
      playsinline: 1
    },
    events: {
      "onReady": function() {
        if (keys.length >= 2) {
          player.cuePlaylist(keys)
        }
      }
    }
  })
  element.player = player
}

function onChangeText(element, key) {
  console.log(element, key)
  if (key == "name" && document.querySelector("input[name=_method]").value == "post") {
    const code = element.value.toLowerCase()
                              .replace(/\s/g, "_")
                              .replace(/\./g, "_")
    document.querySelector("input[name='entry[code]']").value = code
  } else if (["icon_url", "thumbnail_url", "large_url"].includes(key)) {
    document.querySelector("#image_"+key).src = document.querySelector("input[name='image["+key+"]']").value
  } else if (key == "youtube_keys") {
    const video = document.querySelector("#youtube")
    video.innerHTML = ""
    video.setAttribute("data-key", element.value)
    loadYoutubeVideo(video)
  } else if (key == "link") {
    element.parentNode.parentNode.querySelector(".anchor").href = element.value
    const title = element.parentNode.parentNode.querySelector("input[name='links[title][]']")
    if (element.value) {
      ajaxPostRequest("/admin/api/get_title", {url: element.value}, (result)=>{
        const data = JSON.parse(result)
        console.log(data)
        title.value = decodeURIComponent(data.title)
        const info = document.querySelector("#info")
        for (var key in data) {
          if (key != "title") {
            const div = document.createElement("div")
            const label = document.createElement("label")
            label.innerText = key
            const input = document.createElement("input")
            input.type = "text"
            input.addEventListener("focus", function(){this.select()})
            input.value = data[key]
            label.appendChild(input)
            div.appendChild(label)
            info.appendChild(div)
          }
        }
      })
    } else {
      title.value = ""
    }
  }
}
function onClickButton(e, key) {
  const clone = e.parentNode.previousElementSibling.cloneNode(true)
  Array.prototype.slice.call(clone.querySelectorAll("input")).forEach((node)=>{
    node.value = ""
  })
  e.parentNode.parentNode.insertBefore(clone, e.parentNode)
}
</script>
